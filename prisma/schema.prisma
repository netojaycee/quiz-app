// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
    output   = "../node_modules/.prisma/client"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum UserRole {
    MODERATOR
    CONTESTANT
    AUDIENCE
}

enum QuizType {
    multiple_choice
    yes_no
    simultaneous // All questions answered at once, no sequential answering
}

enum QuestionType {
    multiple_choice
    yes_no
}

enum Difficulty {
    easy
    medium
    hard
}

model Quiz {
    id        String   @id @default(cuid())
    name      String
    isActive  Boolean  @default(true)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    winnerId  String? // ID of the winning user

    rounds            Round[]
    questions         Question[] // All questions for this quiz
    responses         Response[]
    contestants       Contestant[]
    scores            Score[]
    users             User[] // Users associated with this quiz
    positions         QuizPosition[] // Track user positions/rankings
    participantOrders ParticipantOrder[] // Track participant order for sequential answering
}

model Round {
    id                      String   @id @default(cuid())
    quizId                  String
    quiz                    Quiz     @relation(fields: [quizId], references: [id])
    roundNumber             Int
    quizType                QuizType @default(multiple_choice) // multiple_choice, yes_no, simultaneous
    timePerQuestion         Int? // Seconds per question (Type 1/2) or total time for round (Type 3)
    questionsPerParticipant Int      @default(3) // Number of questions each participant should answer
    isActive                Boolean  @default(false)
    createdAt               DateTime @default(now())

    scores Score[]

    @@unique([quizId, roundNumber]) // Ensure unique round numbers per quiz
}

model Question {
    id                 String       @id @default(cuid())
    quizId             String
    questionNumber     Int // Tile number (1, 2, 3...) - for frontend tile display
    questionText       String
    questionType       QuestionType @default(multiple_choice) // "multiple_choice", "yes_no"
    options            Json // ["Option 1", "Option 2", "Option 3", "Option 4"] or ["Yes", "No"]
    correctAnswerIndex Int // Index of correct answer (0, 1, 2, 3 for multiple choice, 0 or 1 for yes/no)
    isAnswered         Boolean      @default(false) // Track if question has been used in any round
    difficulty         Difficulty?  @default(medium) // "easy", "medium", "hard" - for future categorization
    createdAt          DateTime     @default(now())
    updatedAt          DateTime     @updatedAt

    quiz      Quiz       @relation(fields: [quizId], references: [id], onDelete: Cascade)
    responses Response[]

    @@unique([quizId, questionNumber]) // Ensure unique question numbers per quiz for tile system
    @@index([quizId, questionType, isAnswered]) // Optimize fetching unanswered questions by type
    @@index([quizId, isAnswered]) // Optimize fetching unanswered questions
}

model Contestant {
    id       String   @id @default(cuid())
    name     String // Contestant's name (e.g., "John", "Peace")
    userId   String // The user (team lead) this contestant belongs to
    quizId   String // The quiz this contestant is participating in
    location String? // Optional location info (e.g., "Lagos", "Kogi")
    joinedAt DateTime @default(now())
    isActive Boolean  @default(true)

    user User @relation(fields: [userId], references: [id])
    quiz Quiz @relation(fields: [quizId], references: [id])

    @@unique([name, userId, quizId]) // A user can't have duplicate contestant names per quiz
}

model User {
    id        String   @id @default(cuid())
    username  String   @unique
    password  String?
    quizId    String? // Optional, if the user is associated with a specific quiz
    role      UserRole @default(CONTESTANT)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    quiz              Quiz?              @relation(fields: [quizId], references: [id])
    responses         Response[]
    scores            Score[]
    contestants       Contestant[] // A user can have many contestant entries (group quiz)
    positions         QuizPosition[] // Track positions in different quizzes
    participantOrders ParticipantOrder[] // Track order in different quizzes

    @@unique([username, quizId])
    @@map("users")
}

model Response {
    id            String   @id @default(cuid())
    userId        String // The user (team) who answered
    quizId        String
    roundId       String
    questionId    String
    selectedIndex Int
    isCorrect     Boolean
    pointsEarned  Int      @default(0) // Points earned for this response
    submittedAt   DateTime @default(now())

    user     User     @relation(fields: [userId], references: [id])
    question Question @relation(fields: [questionId], references: [id])
    quiz     Quiz     @relation(fields: [quizId], references: [id])

    @@unique([userId, questionId]) // One response per user per question
}

model Score {
    id                String @id @default(cuid())
    userId            String // The user (team) whose score this is
    quizId            String
    roundId           String
    roundScore        Int    @default(0) // Sum of points from all questions in this round
    questionsAnswered Int    @default(0) // Number of questions answered in this round
    questionsCorrect  Int    @default(0) // Number of correct answers in this round

    user  User  @relation(fields: [userId], references: [id])
    quiz  Quiz  @relation(fields: [quizId], references: [id])
    round Round @relation(fields: [roundId], references: [id])

    @@unique([userId, quizId, roundId]) // One score per user per round
}

// Track user positions/rankings in quizzes
model QuizPosition {
    id          String   @id @default(cuid())
    userId      String
    quizId      String
    position    Int // 1st, 2nd, 3rd, etc.
    totalScore  Int // Final score for this quiz
    completedAt DateTime @default(now())

    user User @relation(fields: [userId], references: [id])
    quiz Quiz @relation(fields: [quizId], references: [id])

    @@unique([userId, quizId]) // One position per user per quiz
    @@unique([quizId, position]) // One position per quiz (no ties for now)
}

// Track participant order in rounds (for sequential question answering)
model ParticipantOrder {
    id         String   @id @default(cuid())
    quizId     String
    userId     String
    orderIndex Int // 0, 1, 2, etc. - order in which they answer questions
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt

    user User @relation(fields: [userId], references: [id])
    quiz Quiz @relation(fields: [quizId], references: [id])

    @@unique([quizId, userId]) // One order per user per quiz
    @@unique([quizId, orderIndex]) // One index per quiz
}
